{"ast":null,"code":"import _slicedToArray from\"/home/jason/sei/unit2/week6/30/weather-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import axios from'axios';import WeatherHistoryCard from'../components/card-component/WeatherHistoryCard';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var WeatherHistory=function WeatherHistory(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),weatherHistoryData=_useState2[0],setWeatherHistoryData=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),userLocation=_useState4[0],setUserLocation=_useState4[1];var apiKey='b739f9dce98a4420b36175641221102';var baseUrl=\"https://api.weatherapi.com/v1/forecast.json?key=\".concat(apiKey,\"&q=\").concat(userLocation,\"&days=3\");var handleChange=function handleChange(e){setUserLocation(e.target.value);};var handleSubmit=function handleSubmit(e){e.preventDefault();axios.get(baseUrl).then(function(info){setWeatherHistoryData(info.data.forecast.forecastday);console.log(weatherHistoryData);}).catch(function(err){console.log(\"NOOOOO!!!!\",err.message);});};var forecastInfo=weatherHistoryData.map(function(info,index){return/*#__PURE__*/_jsxs(\"div\",{children:[\" \",/*#__PURE__*/_jsx(WeatherHistoryCard,{date:info.date,humidity:info.day.avghumidity,temp:info.day.avgtemp_f,visibility:info.day.avgvis_miles,condition:info.day.condition.text,icon:info.day.condition.icon},index),\" \"]});});return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"input\",{className:\"location-input\",onChange:handleChange}),/*#__PURE__*/_jsx(\"button\",{className:\"button-search\",children:\"Search by location\"})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"h1\",{children:\"Weather History\"}),forecastInfo]});};export default WeatherHistory;","map":{"version":3,"sources":["/home/jason/sei/unit2/week6/30/weather-app/src/main-components/WeatherHistory.js"],"names":["React","useState","axios","WeatherHistoryCard","WeatherHistory","weatherHistoryData","setWeatherHistoryData","userLocation","setUserLocation","apiKey","baseUrl","handleChange","e","target","value","handleSubmit","preventDefault","get","then","info","data","forecast","forecastday","console","log","catch","err","message","forecastInfo","map","index","date","day","avghumidity","avgtemp_f","avgvis_miles","condition","text","icon"],"mappings":"gIAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,KAA8B,OAA9B,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,kBAAP,KAA+B,iDAA/B,C,wFAEA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAE3B,cAAoDH,QAAQ,CAAC,EAAD,CAA5D,wCAAOI,kBAAP,eAA2BC,qBAA3B,eACA,eAAwCL,QAAQ,CAAC,EAAD,CAAhD,yCAAOM,YAAP,eAAqBC,eAArB,eAGA,GAAMC,CAAAA,MAAM,CAAG,iCAAf,CAEA,GAAMC,CAAAA,OAAO,2DAAsDD,MAAtD,eAAkEF,YAAlE,WAAb,CAEA,GAAMI,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,CAAD,CAAO,CAC1BJ,eAAe,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf,CACD,CAFD,CAIA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACH,CAAD,CAAO,CAC1BA,CAAC,CAACI,cAAF,GACAd,KAAK,CACFe,GADH,CACOP,OADP,EAEGQ,IAFH,CAEQ,SAACC,IAAD,CAAU,CACdb,qBAAqB,CAACa,IAAI,CAACC,IAAL,CAAUC,QAAV,CAAmBC,WAApB,CAArB,CACAC,OAAO,CAACC,GAAR,CAAYnB,kBAAZ,EACD,CALH,EAMGoB,KANH,CAMS,SAACC,GAAD,CAAS,CACdH,OAAO,CAACC,GAAR,CAAY,YAAZ,CAA0BE,GAAG,CAACC,OAA9B,EACD,CARH,EASC,CAXH,CAcE,GAAMC,CAAAA,YAAY,CAAGvB,kBAAkB,CAACwB,GAAnB,CAAuB,SAACV,IAAD,CAAOW,KAAP,CAAiB,CAC3D,mBACE,wCAAM,KAAC,kBAAD,EAAoB,IAAI,CAAEX,IAAI,CAACY,IAA/B,CAAiD,QAAQ,CAAEZ,IAAI,CAACa,GAAL,CAASC,WAApE,CAAiF,IAAI,CAAEd,IAAI,CAACa,GAAL,CAASE,SAAhG,CAA2G,UAAU,CAAEf,IAAI,CAACa,GAAL,CAASG,YAAhI,CAA8I,SAAS,CAAEhB,IAAI,CAACa,GAAL,CAASI,SAAT,CAAmBC,IAA5K,CAAkL,IAAI,CAAElB,IAAI,CAACa,GAAL,CAASI,SAAT,CAAmBE,IAA3M,EAA0CR,KAA1C,CAAN,OADF,CAGD,CAJoB,CAArB,CAOF,mBACE,oCACE,cAAM,QAAQ,CAAEf,YAAhB,wBACE,cAAO,SAAS,CAAC,gBAAjB,CAAmC,QAAQ,CAAEJ,YAA7C,EADF,cAEE,eAAQ,SAAS,CAAC,eAAlB,gCAFF,GADF,cAKE,aALF,cAOE,uCAPF,CASGiB,YATH,GADF,CAcD,CAjDD,CAmDA,cAAexB,CAAAA,cAAf","sourcesContent":["import React, {useState} from 'react';\nimport axios from 'axios';\nimport WeatherHistoryCard from '../components/card-component/WeatherHistoryCard';\n\nconst WeatherHistory = () => {\n\n  const [weatherHistoryData, setWeatherHistoryData] = useState([]);\n  const [userLocation, setUserLocation] = useState('');\n  \n\n  const apiKey = 'b739f9dce98a4420b36175641221102';\n\n  const baseUrl = `https://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${userLocation}&days=3`;\n\n  const handleChange = (e) => {\n    setUserLocation(e.target.value);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    axios\n      .get(baseUrl)\n      .then((info) => {\n        setWeatherHistoryData(info.data.forecast.forecastday);\n        console.log(weatherHistoryData);\n      })\n      .catch((err) => {\n        console.log(\"NOOOOO!!!!\", err.message);\n      });\n    }\n    \n    \n    const forecastInfo = weatherHistoryData.map((info, index) => {\n      return ( \n        <div> <WeatherHistoryCard date={info.date} key={index} humidity={info.day.avghumidity} temp={info.day.avgtemp_f} visibility={info.day.avgvis_miles} condition={info.day.condition.text} icon={info.day.condition.icon}/> </div>\n      )\n    })\n\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input className='location-input'  onChange={handleChange}/>\n        <button className='button-search'>Search by location</button>\n      </form>\n      <br/>\n      \n      <h1>Weather History</h1>\n      {/* {  weatherHistoryData === [] || weatherHistoryData === undefined ? <div></div> : forecastInfo} */}\n      {forecastInfo}\n      \n    </div>\n  )\n}\n\nexport default WeatherHistory;\n"]},"metadata":{},"sourceType":"module"}